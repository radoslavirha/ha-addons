---
name: Build addon Docker images and publish to Docker Hub if requested

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      TARGET:
        description: Addon subfolder inside addons folder
        required: true
        default: laskakit-data-feeder
        type: string
      PUBLISH:
        description: Whether to build and publish to Docker Hub or just build the image
        required: true
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      TARGET:
        description: Addon subfolder inside addons folder
        required: true
        default: laskakit-data-feeder
        type: string
      PUBLISH:
        description: Whether to build and publish to Docker Hub or just build the image
        required: true
        default: false
        type: boolean

jobs:
  information:
    name: Gather ${{ inputs.TARGET }} information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      image: ${{ steps.information.outputs.image }}
      name: ${{ steps.information.outputs.name }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.fix.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run add-on information
        id: information
        # This action incorrectly works with json files. It returns string values with quotes.
        # yq should use -r flag to remove them.
        uses: frenck/action-addon-information@v1
        with:
          path: ./addons/${{ inputs.TARGET }}
      - name: Fix outputs
        id: fix
        run: |
          echo "version=$(echo "${{ steps.information.outputs.version }}" | yq -r)" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ inputs.TARGET }} ${{ matrix.architecture }} docker image
    runs-on: ubuntu-latest
    needs: information
    if: ${{ needs.information.outputs.architectures != '[]' }}
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.information.outputs.architectures) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up .npmrc
        uses: v-venes/create-npmrc@v1.0.0
        with:
          org_name: radoslavirha
          auth_token: ${{ secrets.TOOLKIT_HUB_PACKAGES }}
      - name: Copy pnpm-lock.yaml
        uses: canastro/copy-file-action@master
        with:
          source: pnpm-lock.yaml
          target: ${{ needs.information.outputs.target }}/pnpm-lock.yaml
      - name: Login to DockerHub
        if: ${{ inputs.PUBLISH == true || inputs.PUBLISH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          # - name: 🏗 Set up build cache
          #   id: cache
          #   uses: actions/cache@v4.2.0
          #   with:
          #     path: /tmp/.docker-cache
          #     key: docker-${{ matrix.architecture }}-${{ github.sha }}
          #     restore-keys: |
          #       docker-${{ matrix.architecture }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: Compose build flags
        id: flags
        shell: bash
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors -r eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")

          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

          image=$(echo "${{ needs.information.outputs.image }}" | sed -r "s/\{arch\}/${{ matrix.architecture }}/g")
          echo "image=${image}" >> "$GITHUB_OUTPUT"
      - name: Download base image
        if: steps.flags.outputs.from != 'null'
        shell: bash
        run: docker pull ${{ steps.flags.outputs.from }}
      - name: Build
        uses: docker/build-push-action@v6
        with:
          push: ${{ inputs.PUBLISH }}
          load: true
          context: ${{ needs.information.outputs.target }}
          file: ${{ needs.information.outputs.target }}/Dockerfile
          tags: |
            ${{ steps.flags.outputs.image }}:latest
            ${{ steps.flags.outputs.image }}:${{ needs.information.outputs.version }}
          # cache-from: |
          #   type=local,src=/tmp/.docker-cache
          #   ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ matrix.architecture }}:edge
          # cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          secret-files: |
            "npmrc=.npmrc"
          build-args: |
            BUILD_FROM=${{ steps.flags.outputs.from }}
          labels: |
            io.hass.name=${{ needs.information.outputs.name }}
            io.hass.description=${{ needs.information.outputs.description }}
            io.hass.arch=${{ matrix.architecture }}
            io.hass.type=addon
            io.hass.version=${{ needs.information.outputs.version }}
            maintainer=Radoslav Irha <radoslav.irha@gmail.com>
            org.opencontainers.image.title=${{ needs.information.outputs.name }}
            org.opencontainers.image.description=${{ needs.information.outputs.description }}
            org.opencontainers.image.vendor=Radoslav Irha Add-ons
            org.opencontainers.image.authors=Radoslav Irha <radoslav.irha@gmail.com>
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.created=${{ steps.flags.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.information.outputs.version }}

        # # This ugly bit is necessary, or our cache will grow forever...
        # # Well until we hit GitHub's limit of 5GB :)
        # # https://github.com/docker/build-push-action/issues/252
        # # https://github.com/moby/buildkit/issues/1896
        # - name: 🚚 Swap build cache
        #   shell: bash
        #   run: |
        #     rm -rf /tmp/.docker-cache
        #     mv /tmp/.docker-cache-new /tmp/.docker-cache


# OLD CODE
# - name: |
#     ${{ inputs.PUBLISH == 'false' && 'Test build' || 'Publish to Docker Hub' }}
#   uses: home-assistant/builder@master
#   env:
#     NODE_AUTH_TOKEN: ${{ inputs.NODE_AUTH_TOKEN }}
#   with:
#     args: |
#       --all \
#       --target addons/${{ inputs.ADDON_SUBFOLDER }} \
#       ${{ inputs.PUBLISH == 'true' && format('--docker-hub {0}', inputs.DOCKERHUB_USERNAME) || '' }} \
#       ${{ inputs.PUBLISH == 'false' && '--test' || '' }}

# inputs:
#   TARGET:
#     description: Addon subfolder inside addons folder
#     required: true
#   ADDON_ARCHITECTURE:
#     description: Addon architecture to build for
#     required: true
#   PUBLISH:
#     description: Whether to build and publish to Docker Hub or just build the image
#     required: true
#     default: 'false'
#   NODE_AUTH_TOKEN:
#     description: A Node auth token / GitHub token
#     required: true
#   DOCKERHUB_USERNAME:
#     description: Docker Hub username (repository owner). Required if PUBLISH is true
#     required: false
#   DOCKERHUB_TOKEN:
#     description: Docker Hub token used to publish image. Required if PUBLISH is true
#     required: false
