---
name: Build addon Docker images and publishe to Docker Hub if requested

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      ADDON_TARGET:
        required: true
        type: string
      DOCKERHUB_PUBLISH:
        required: true
        type: boolean

# inputs:
#   ADDON_TARGET:
#     description: Addon subfolder inside addons folder
#     required: true
#   ADDON_ARCHITECTURE:
#     description: Addon architecture to build for
#     required: true
#   DOCKERHUB_PUBLISH:
#     description: Whether to build and publish to Docker Hub or just build the image
#     required: true
#     default: 'false'
#   NODE_AUTH_TOKEN:
#     description: A Node auth token / GitHub token
#     required: true
#   DOCKERHUB_USERNAME:
#     description: Docker Hub username (repository owner). Required if DOCKERHUB_PUBLISH is true
#     required: false
#   DOCKERHUB_TOKEN:
#     description: Docker Hub token used to publish image. Required if DOCKERHUB_PUBLISH is true
#     required: false

jobs:
  build:
    name: Build ${{ inputs.ADDON_TARGET }} docker images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run add-on information
        id: information
        uses: frenck/action-addon-information@v1
        with:
          path: ./addons/${{ inputs.ADDON_TARGET }}
          # - name: Login to DockerHub
          #   if: ${{ inputs.DOCKERHUB_PUBLISH == 'true' }}
          #   uses: docker/login-action@v3
          #   with:
          #     username: ${{ inputs.DOCKERHUB_USERNAME }}
          #     password: ${{ inputs.DOCKERHUB_TOKEN }}
          # - name: üèó Set up build cache
          #   id: cache
          #   uses: actions/cache@v4.2.0
          #   with:
          #     path: /tmp/.docker-cache
          #     key: docker-${{ inputs.ADDON_ARCHITECTURE }}-${{ github.sha }}
          #     restore-keys: |
          #       docker-${{ inputs.ADDON_ARCHITECTURE }}
          # - name: üèó Set up QEMU
          #   uses: docker/setup-qemu-action@v3.2.0
          # - name: üèó Set up Docker Buildx
          #   uses: docker/setup-buildx-action@v3.8.0
          # - name: ‚ÑπÔ∏è Compose build flags
          #   id: flags
          #   shell: bash
          #   run: |
          #     echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          #     from=$(yq --no-colors eval ".build_from.${{ inputs.ADDON_ARCHITECTURE }}" "${{ needs.information.outputs.build }}")
          #     echo "from=${from}" >> "$GITHUB_OUTPUT"

          #     if [[ "${{ inputs.ADDON_ARCHITECTURE}}" = "amd64" ]]; then
          #       echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          #     elif [[ "${{ inputs.ADDON_ARCHITECTURE }}" = "i386" ]]; then
          #       echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          #     elif [[ "${{ inputs.ADDON_ARCHITECTURE }}" = "armhf" ]]; then
          #       echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          #     elif [[ "${{ inputs.ADDON_ARCHITECTURE }}" = "armv7" ]]; then
          #       echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          #     elif [[ "${{ inputs.ADDON_ARCHITECTURE }}" = "aarch64" ]]; then
          #       echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          #     else
          #       echo "::error ::Could not determine platform for architecture ${{ inputs.ADDON_ARCHITECTURE }}"
          #       exit 1
          #     fi
          # - name: ‚§µÔ∏è Download base image
          #   if: steps.flags.outputs.from != 'null'
          #   shell: bash
          #   run: docker pull "${{ steps.flags.outputs.from }}"
          # - name: üöÄ Build
          #   uses: docker/build-push-action@v6.10.0
          #   with:
          #     push: false
          #     context: ${{ needs.information.outputs.target }}
          #     file: ${{ needs.information.outputs.target }}/Dockerfile
          #     cache-from: |
          #       type=local,src=/tmp/.docker-cache
          #       ghcr.io/${{ github.repository_owner }}/${{ needs.information.outputs.slug }}/${{ inputs.ADDON_ARCHITECTURE }}:edge
          #     cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          #     platforms: ${{ steps.flags.outputs.platform }}
          #     build-args: |
          #       BUILD_ARCH=${{ inputs.ADDON_ARCHITECTURE }}
          #       BUILD_DATE=${{ steps.flags.outputs.date }}
          #       BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
          #       BUILD_FROM=${{ steps.flags.outputs.from }}
          #       BUILD_NAME=${{ needs.information.outputs.name }}
          #       BUILD_REF=${{ github.sha }}
          #       BUILD_REPOSITORY=${{ github.repository }}
          #       BUILD_VERSION=edge
          # # This ugly bit is necessary, or our cache will grow forever...
          # # Well until we hit GitHub's limit of 5GB :)
          # # https://github.com/docker/build-push-action/issues/252
          # # https://github.com/moby/buildkit/issues/1896
          # - name: üöö Swap build cache
          #   shell: bash
          #   run: |
          #     rm -rf /tmp/.docker-cache
          #     mv /tmp/.docker-cache-new /tmp/.docker-cache
          # OLD CODE
          # - name: |
          #     ${{ inputs.DOCKERHUB_PUBLISH == 'false' && 'Test build' || 'Publish to Docker Hub' }}
          #   uses: home-assistant/builder@master
          #   env:
          #     NODE_AUTH_TOKEN: ${{ inputs.NODE_AUTH_TOKEN }}
          #   with:
          #     args: |
          #       --all \
          #       --target addons/${{ inputs.ADDON_SUBFOLDER }} \
          #       ${{ inputs.DOCKERHUB_PUBLISH == 'true' && format('--docker-hub {0}', inputs.DOCKERHUB_USERNAME) || '' }} \
          #       ${{ inputs.DOCKERHUB_PUBLISH == 'false' && '--test' || '' }}
